if (NOT IREE_TARGET_BACKEND_ROCM)
  return()
endif()

iree_add_all_subdirs()

set (_amd_ukernel_libs)
set (_amd_ukernel_targets)
function(iree_rocm_bitcode_library)
  cmake_parse_arguments(
    _RULE
    ""
    "NAME;OUT;ROCM_ARCH"
    "SRCS;COPTS"
    ${ARGN}
  )

  if(DEFINED _RULE_OUT)
    set(_OUT "${_RULE_OUT}")
  else()
    set(_OUT "${_RULE_NAME}_${_RULE_ROCM_ARCH}.bc")
  endif()

  set(_ROCM_ARCH "${_RULE_ROCM_ARCH}")

  set(_COPTS
    "-x" "hip"
    # Target architecture.
    "--offload-arch=${_ROCM_ARCH}"

    # Suppress warnings about missing path to rocm lib,
    # and benign warning about ROCM version.
    "-nogpulib"
    "--offload-device-only"
    "-D_ALLOW_COMPILER_AND_STL_VERSION_MISMATCH"
    "-Xclang" "-disable-llvm-optzns"
    "-O3"

    # https://github.com/llvm/llvm-project/issues/54609
    "-D_ALLOW_COMPILER_AND_STL_VERSION_MISMATCH"

    # Object file only in bitcode format:
    "-c"
    "-emit-llvm"
  )

  set(_BITCODE_FILES)
  foreach(_SRC ${_RULE_SRCS})
    get_filename_component(_BITCODE_SRC_PATH "${_SRC}" REALPATH)
    set(_BITCODE_FILE "${_RULE_NAME}_${_SRC}.bc")
    list(APPEND _BITCODE_FILES ${_BITCODE_FILE})
    add_custom_command(
      OUTPUT
        "${_BITCODE_FILE}"
      COMMAND
        "${IREE_CLANG_BINARY}"
        ${_COPTS}
        "${_BITCODE_SRC_PATH}"
        "-o"
        "${_BITCODE_FILE}"
      DEPENDS
        "${IREE_CLANG_BINARY}"
        "${_SRC}"
      COMMENT
        "Compiling ${_SRC} to ${_BITCODE_FILE}"
      VERBATIM
    )
  endforeach()

  add_custom_command(
    OUTPUT
      ${_OUT}
    COMMAND
      ${IREE_LLVM_LINK_BINARY}
      ${_BITCODE_FILES}
      "-o"
      "${_OUT}"
    DEPENDS
      ${IREE_LLVM_LINK_BINARY}
      ${_BITCODE_FILES}
    COMMENT
      "Linking bitcode to ${_OUT}"
    VERBATIM
  )
  # Only add iree_${NAME} as custom target doesn't support aliasing to
  # iree::${NAME}.
  iree_package_name(_PACKAGE_NAME)
  add_custom_target("${_PACKAGE_NAME}_${_RULE_NAME}"
    DEPENDS "${_OUT}"
  )
  set(_amd_ukernel_libs ${_amd_ukernel_libs} ${_OUT} PARENT_SCOPE)
  set(_amd_ukernel_targets ${_amd_ukernel_targets} "${_PACKAGE_NAME}_${_RULE_NAME}" PARENT_SCOPE)
endfunction()

iree_rocm_bitcode_library(
  NAME
    rocm_argmax_ukernel
  ROCM_ARCH
    gfx940
  SRCS
    "argmax_ukernel.c"
)

# Copy UKernel into platform dir.
set(_platform_lib_reldir "iree_platform_libs/rocm")
set(_all_ukernel_bc_copy_commands)
set(_all_ukernel_bc_files)
set(_ukernel_lib_srcdir "/home/stwinata/nod/iree-build-notrace/runtime/src/iree/builtins/ukernel/arch/rocm")
foreach(_amd_ukernel_name ${_amd_ukernel_libs})
  # Copy to lib/ tree.
  set(_ukernel_bc_srcpath "${_ukernel_lib_srcdir}/${_amd_ukernel_name}")
  set(_ukernel_bc_relpath "${_platform_lib_reldir}/${_amd_ukernel_name}")
  list(APPEND _all_ukernel_bc_files "${IREE_COMPILER_DYLIB_DIR}/${_ukernel_bc_relpath}")
  list(APPEND _all_ukernel_bc_deps "${_ukernel_bc_path}")
  list(APPEND _all_ukernel_bc_copy_commands
    COMMAND ${CMAKE_COMMAND} -E copy
      "${_ukernel_bc_srcpath}"
      "${IREE_COMPILER_DYLIB_DIR}/${_ukernel_bc_relpath}"
  )
  # Note this bc file as being part of the bundle that must be included with
  # the compiler dylib.
  set_property(GLOBAL APPEND PROPERTY IREE_COMPILER_DYLIB_RELPATHS "${_ukernel_bc_relpath}")
endforeach()

# Generate a custom target with all file level dependencies and commands to
# copy to our build tree locations.
# Our GenDeviceLibs target depends on all of the defined device lib targets.
add_custom_command(
  OUTPUT ${_all_ukernel_bc_files}
  DEPENDS ${_amd_ukernel_targets}
  POST_BUILD
    ${_all_ukernel_bc_copy_commands}
)

add_custom_target(iree_builtin_ROCM_UkernelDeviceLibs
  DEPENDS
    ${_all_ukernel_bc_files}
)

set_property(GLOBAL APPEND PROPERTY IREE_COMPILER_DYLIB_DEPENDS
  iree_builtin_ROCM_UkernelDeviceLibs)

# Install.
install(FILES ${_all_ukernel_bc_files}
  DESTINATION "${IREE_COMPILER_DYLIB_INSTALL_PREFIX}/${_platform_lib_reldir}")
