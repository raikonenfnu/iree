// Copyright 2021 The IREE Authors
//
// Licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#ifndef IREE_DIALECT_LINALGEXT_PASSES
#define IREE_DIALECT_LINALGEXT_PASSES

include "mlir/Pass/PassBase.td"

def LinalgExtToLoops :
    InterfacePass<"iree-linalg-ext-to-loops", "mlir::FunctionOpInterface"> {
  let summary = "Convert LinalgExt ops to loops and Linalg ops.";
  let constructor = "mlir::iree_compiler::IREE::LinalgExt::createLinalgExtToLoopsPass()";
}

def PadContractionToBlockSize :
    Pass<"iree-linalg-pad-contraction-to-block-size", ""> {
  let summary = "Pads contraction (matmul) ops to next multiple of block size";
  let description = [{
    This pass will apply padding to any supported linalg contractions:
      * Row-major matmul:
          Padded to <rowAlignment x columnAlignment>

    Both rowAlignment and columnAlignment must be power-of-two values. If an
    op is already statically padded properly, no change will be made. However,
    if dynamic dimensions exist, padding will be applied regardless. Because
    of the dynamic case, applying this pass multiple times can result in
    mutation on each run.
  }];
  let constructor = "mlir::iree_compiler::IREE::LinalgExt::createPadContractionToBlockSizePass()";
  let options = [
    Option<"rowAlignment", "rowAlignment", "int", /*default=*/"16",
           "The row-wise output block size">,
    Option<"columnAlignment", "columnAlignment", "int", /*default=*/"16",
           "The column-wise output block size">,
  ];
}

def TopkSplitReduction:
    InterfacePass<"iree-linalg-ext-topk-split-reduction", "mlir::FunctionOpInterface"> {
  let summary = "Topk split reduction pass.";
  let description = [{
    Produces a "map-reduce" style of parallelizing a Topk Op. The op is split
    into two, on containing reducitons in parallel and the other contianing the
    combination of the parallel reductions into a final result.
  }];
  let constructor = "mlir::iree_compiler::IREE::LinalgExt::createTopkSplitReductionPass()";
  let options = [
    ListOption<"splitRatios", "split-ratios", "int",
           "List of split reduction ratios">,
  ];
}

def DecomposeWinogradTransform :
    InterfacePass<"iree-linalg-ext-decompose-winograd", "mlir::FunctionOpInterface"> {
  let summary =
      "Decomposes winograd transform ops into linalg ops";
  let constructor = "mlir::iree_compiler::IREE::LinalgExt::"
                    "createDecomposeWinogradTransformPass()";
}

def ConvertConv2DToWinograd :
    InterfacePass<"iree-linalg-ext-convert-conv2d-to-winograd", "mlir::FunctionOpInterface"> {
  let summary = "Convert linalg convolution ops to winograd based implementation. By default, "
                "only convs annotated with a `__winograd_conv` attribute will be rewritten.";
  let constructor = "mlir::iree_compiler::IREE::LinalgExt::createConvertConv2DToWinogradPass()";
  let options = [
    Option<"replaceAllConvs", "replace-all-convs", "bool",
           /*default=*/"false",
           "Choose to ignore `__winograd_conv` annotations and transform all"
           "compatible convolutions.">,
  ];
}

def TileAttention :
    InterfacePass<"iree-linalg-ext-tile-attention", "mlir::FunctionOpInterface"> {
  let summary =
      "Tile the attention op along the reduction dimension";
  let constructor = "mlir::iree_compiler::IREE::LinalgExt::"
                    "createTileAttentionPass()";
  let options = [
    Option<"tileSize", "tileSize", "uint64_t", /*default=*/"",
           "Tile size for sequential for loop in attention">,
  ];
}

def PadAttention :
    InterfacePass<"iree-linalg-ext-pad-attention", "mlir::FunctionOpInterface"> {
  let summary =
      "Tile the attention op along the reduction dimension";
  let constructor = "mlir::iree_compiler::IREE::LinalgExt::"
                    "createPadAttentionPass()";
  let options = [
    ListOption<"padToMultipleOf", "pad-to-multiple-of", "int64_t",
                  "Array to represent the number to pad to multiple of for attention dims.">,
  ];
}

def DecomposeAttention :
    InterfacePass<"iree-linalg-ext-decompose-attention", "mlir::FunctionOpInterface"> {
  let summary =
      "Decomposes attention op into a sequence of linalg ops";
  let constructor = "mlir::iree_compiler::IREE::LinalgExt::"
                    "createDecomposeAttentionPass()";
  let options = [
    Option<"tileSize", "tileSize", "uint64_t", /*default=*/"",
           "Tile size for sequential for loop in attention">,
  ];
}

def ConvertAttentionToOnlineAttention :
    InterfacePass<"iree-linalg-ext-convert-attention-to-online-attention",
    "mlir::FunctionOpInterface"> {
  let summary = "";
  let constructor = "mlir::iree_compiler::IREE::LinalgExt::"
                    "createConvertAttentionToOnlineAttentionPass()";
}

#endif  // IREE_DIALECT_LINALGEXT_PASSES
